<!-- Contains view-layer support for Hobo's lifecycles. Note that lifecycle forms are generated automatically in `app/views/taglibs/auto/rapid/forms.dryml` - this library contains only lifecycle push-buttons. -->

<!-- A push-button to invoke a lifecycle transition either as a page-reload or as an ajax call.

### Attributes

 - `transition` - the name of the transition to invoke. Required
 - `update` - one or more DOM IDs of ajax parts to update after the transition
 - `label` - the label on the button. Defaults to the name of the transition

All of the [standard ajax attributes](/api_taglibs/rapid_forms) are also supported.

### Warning

Transitions with parameters are implemented using a form.  HTML does not allow forms to be nested, so a transitions with parameters should not be placed inside of a form.

  -->
<def tag="transition-button" attrs="transition, update, label"><%=
    if transition.is_a?(String)
      transition = this.lifecycle.find_transition(transition, current_user)
    end
    transition_name = transition.name
    has_params = !transition.options[:params].blank?
    ajax_attributes, html_attributes = attributes.partition_hash(Hobo::Rapid::Helper::AJAX_ATTRS)

    html_attributes[:method] ||= has_params ? :get : :put
    add_classes!(html_attributes, "transition-button #{transition_name}-button")
    label = ht("#{this.class.to_s.underscore}.actions.#{transition_name}", :default => (label || transition_name.to_s.titleize))
    url = object_url(this, transition_name, :method => html_attributes[:method])

    if (update || !ajax_attributes.empty?) && !has_params
      ajax_attributes[:message] ||= label
      ajax_attributes[:method] = html_attributes[:method]
      func = ajax_updater(url, update, ajax_attributes)
      html_attributes.update(:onclick => "var e = this; " + func, :type =>'button', :value => label)
      element(:input, html_attributes, nil, true, true)
    else
      button_to(label, url, html_attributes)
    end
  %>
</def>


<!-- Renders a div containing transition buttons for every transition available to the current user.

For example, you could use this on a `Friendship` card: the person invited to have friendship would automatically see 'Accept' and 'Decline' buttons, while the person initiating the invite would see 'Retract'.

This tag behaves similarly to repeat: an else tag may be used to handle the case of no buttons:

    <transition-buttons/><else>Sorry, no buttons to press.</else>
  -->
<def tag="transition-buttons">
  <% ajax_attrs, html_attrs = attributes.partition_hash(Hobo::Rapid::Helper::AJAX_ATTRS) %>
  <div merge-attrs="&html_attrs" class="transitions">
    <% transitions = this.lifecycle.publishable_transitions_for(current_user) %>
    <if test="&transitions">
      <% transitions.each do |t| %>
        <transition-button merge-attrs="&ajax_attrs" transition="&t"/>
      <% end %>
    </if>
  </div>
</def>
